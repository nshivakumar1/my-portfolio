---
// blogs.astro
console.log('Executing blogs.astro');
import Blogs from '../components/Blogs.tsx';
import { Fragment } from 'react';
import Layout from '../layouts/Layout.astro';
import { parseString } from 'xml2js';

interface XmlResult { rss: { channel: { item: any | any[] } } }

// Define a type for the post items
interface SubstackPost {
  title: string;
  link: string;
  pubDate?: string;
  contentSnippet?: string;
  // Add other properties as needed
}

// Create a function to fetch Substack posts with proper error handling
async function getSubstackPosts(): Promise<SubstackPost[]> {
  
  // Replace with your actual Substack URL - using Medium as a fallback for testing
  // You can change this to your actual Substack URL later
  const substackUrl = 'https://codeclouddevops.substack.com/feed';
  console.log('Attempting to fetch feed from:', substackUrl);
  
  try {
    // Initial fetch attempt
    const response = await fetch(substackUrl);
    if (!response.ok) {
      console.error(`Initial fetch failed: ${response.status} ${response.statusText}`);
      throw new Error(`Failed to fetch: ${response.status}`);
    }
    console.log(`Initial fetch successful. Status: ${response.status} ${response.statusText}`);
    const xmlText = await response.text();
    console.log('Parsing XML text with xml2js...');

    return new Promise((resolve, reject) => {
      parseString(xmlText, { explicitArray: false, ignoreAttrs: true }, (err: Error | null, result: XmlResult | undefined) => {
        if (err) {
          console.error('xml2js parsing error:', err);
          reject(err);
          return;
        }
        console.log('xml2js parsing successful. Result:', result);

        const items = result?.rss?.channel?.item;
        console.log('Extracted items:', items);

        if (!items) {
          console.log('No items found in the parsed feed.');
          resolve([]);
          return;
        }

        const posts: SubstackPost[] = Array.isArray(items) ? items.map(item => ({
          title: item.title?._cdata || item.title,
          link: item.link,
          pubDate: item.pubDate,
          contentSnippet: item['content:encoded']?._cdata || item.description?._cdata || item.description // Extract content:encoded or description
        })) : [{ title: items.title?._cdata || items.title, link: items.link, pubDate: items.pubDate, contentSnippet: items['content:encoded']?._cdata || items.description?._cdata || items.description }]; // Handle single item case
        console.log('Parsed posts:', posts);
        resolve(posts);
      });
    });

  } catch (error: unknown) {
    console.error("Error fetching or parsing feed.");

    // Log both errors for debugging
      // Log both errors for debugging

  }
}

// Get posts with error handling - DECLARE ONLY ONCE
const posts = await getSubstackPosts();
---

<Layout title="Blog Posts">
  <Fragment>
    <Blogs posts={posts} />
  </Fragment>
</Layout>

<style>
</style>