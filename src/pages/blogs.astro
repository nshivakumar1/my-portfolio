---
// blogs.astro
console.log('Executing blogs.astro');

import Layout from '../layouts/Layout.astro';
import { parseString } from 'xml2js';

interface XmlResult { rss: { channel: { item: any | any[] } } }

// Define a type for the post items
interface SubstackPost {
  title: string;
  link: string;
  pubDate?: string;
  contentSnippet?: string;
  // Add other properties as needed
}

// Create a function to fetch Substack posts with proper error handling
async function getSubstackPosts(): Promise<SubstackPost[]> {
  
  // Replace with your actual Substack URL - using Medium as a fallback for testing
  // You can change this to your actual Substack URL later
  const substackUrl = 'https://codeclouddevops.substack.com/feed';
  console.log('Attempting to fetch feed from:', substackUrl);
  
  try {
    // Try direct fetch first
    // We won't use parseURL as we are switching to xml2js
    // The original error suggests parseURL was failing anyway
    console.log("Skipping direct parseURL, proceeding with fetch and xml2js");
    // const feed = await parser.parseURL(substackUrl);

      // Fallback to fetch API with manual parsing if direct method fails
      const response = await fetch(substackUrl);
      if (!response.ok) {
        console.error(`Fallback fetch failed: ${response.status} ${response.statusText}`);
        throw new Error(`Failed to fetch: ${response.status}`);
      }
      console.log(`Fallback fetch successful. Status: ${response.status} ${response.statusText}`);
      const xmlText = await response.text();
      console.log('Parsing XML text with xml2js...');

      return new Promise((resolve, reject) => {
 parseString(xmlText, { explicitArray: false, ignoreAttrs: true }, (err: Error | null, result: XmlResult | undefined) => {
          if (err) {
            console.error('xml2js parsing error:', err);
            reject(err);
            return;
          }
          console.log('xml2js parsing successful. Result:', result);

          const items = result?.rss?.channel?.item;
          console.log('Extracted items:', items);

          if (!items) {
            console.log('No items found in the parsed feed.');
            resolve([]);
            return;
          }

          const posts: SubstackPost[] = Array.isArray(items) ? items.map(item => ({
            title: item.title?._cdata || item.title,
            link: item.link,
            pubDate: item.pubDate,
            contentSnippet: item['content:encoded']?._cdata || item.description?._cdata || item.description // Extract content:encoded or description
          })) : [{ title: items.title?._cdata || items.title, link: items.link, pubDate: items.pubDate, contentSnippet: items['content:encoded']?._cdata || items.description?._cdata || items.description }]; // Handle single item case
          console.log('Parsed posts:', posts);
          resolve(posts);
        });
      });
    
  } catch (error: unknown) {
    console.error("Direct feed fetch failed, trying workaround...");
    
    // Log both errors for debugging
    if (error instanceof Error) {
      console.error(`Original error: ${error.message}`);
    }

    try {
      // Fallback to fetch API with manual parsing if direct method fails
      const response = await fetch(substackUrl);
      if (!response.ok) {
        console.error(`Fallback fetch failed: ${response.status} ${response.statusText}`);
        throw new Error(`Failed to fetch: ${response.status}`);
      }
      console.log(`Fallback fetch successful. Status: ${response.status} ${response.statusText}`);
      const xmlText = await response.text();
      console.log('Parsing XML text with xml2js...');

      // Log both errors for debugging

  }
}

// Get posts with error handling - DECLARE ONLY ONCE
const posts = await getSubstackPosts();
---

<Layout title="Blog Posts">
  <main>
    <h1>Blog Posts</h1>
    
    {posts.length > 0 ? (
      <div class="posts-container">
        {posts.map((post) => (
          <div class="post-card">
            <h2>{post.title}</h2>
            {post.pubDate && (
              <p class="date">
                {new Date(post.pubDate).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long', 
                  day: 'numeric'
                })}
              </p>
            )}
            {post.contentSnippet && (
              <p>{post.contentSnippet.substring(0, 150)}...</p>
            )}
            <a href={post.link} target="_blank" rel="noopener noreferrer">Read more</a>
          </div>
        ))}
      </div>
    ) : (
      <div class="no-posts">
        <p>No blog posts available at the moment. Check back soon!</p>
      </div>
    )}
  </main>
</Layout>

<style>
  .posts-container {
    display: grid;
    gap: 2rem;
    margin: 2rem 0;
  }
  
  .post-card {
    border: 1px solid #eaeaea;
    border-radius: 8px;
    padding: 1.5rem;
    background-color: #fff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .date {
    color: #666;
    font-size: 0.9rem;
  }
  
  .no-posts {
    text-align: center;
    padding: 3rem 0;
  }
</style>