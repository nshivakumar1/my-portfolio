---
// blogs.astro
import BlogsComponent from '../components/Blogs';
import Layout from '../layouts/Layout.astro';
import type { BlogPost } from '../types';
import Parser from 'rss-parser';

type RssItem = { title: string; link: string; pubDate?: string; contentSnippet?: string };


// Create a function to fetch Substack posts with proper error handling
async function getSubstackPosts(): Promise<RssItem[]> {
  
  // Replace with your actual Substack URL - using Medium as a fallback for testing
  // You can change this to your actual Substack URL later
  const substackUrl = 'https://codeclouddevops.substack.com/feed';
  console.log('Attempting to fetch feed from:', substackUrl);
  
  try {
    const parser = new Parser();
    const feed = await parser.parseURL(substackUrl);
    const items = feed.items || [];
    return items
      .map((item) => ({
        title: (item.title ?? '').toString(),
        link: item.link ?? '',
        pubDate: (item as any).pubDate,
        contentSnippet: (item as any).contentSnippet,
      }))
      .filter((i) => i.title && i.link);

  } catch (error: unknown) {
    console.error("Error fetching or parsing feed.");
    return []; // Return an empty array in case of an error

  }
}

// Get posts with error handling - DECLARE ONLY ONCE
const substackPosts = await getSubstackPosts();

// Helpers to extract first image URL and a short excerpt
function extractFirstImage(html?: string): string | undefined {
  if (!html) return undefined;
  const match = html.match(/<img[^>]+src=["']([^"']+)["']/i);
  return match?.[1];
}

function toExcerpt(text?: string, max = 140): string | undefined {
  if (!text) return undefined;
  const clean = text.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();
  return clean.length > max ? clean.slice(0, max - 1) + 'â€¦' : clean;
}

// Map the fetched SubstackPost data to the BlogPost type
const posts: BlogPost[] = substackPosts.map(post => ({
  title: post.title,
  link: post.link,
  pubDate: post.pubDate,
  contentSnippet: post.contentSnippet,
  imageUrl: extractFirstImage(post.contentSnippet),
  excerpt: toExcerpt(post.contentSnippet)
}));
---

<Layout title="Blog Posts">
    <BlogsComponent posts={posts} />
</Layout>

<style>
</style>